Selenium WebDriver - это инструмент для автоматизации тестирования веб-приложений. Он представляет собой фреймворк,
который позволяет разработчикам и тестировщикам создавать скрипты и автоматически выполнять действия веб-приложения,
такие как заполнение форм, нажатие кнопок, навигация по страницам и многое другое.

Основные характеристики Selenium WebDriver:

1. Поддержка различных языков программирования.
2. Взаимодействие с различными браузерами.
3. Selenium WebDriver предоставляет возможность использовать ожидания (wait), чтобы дождаться
появления или исчезновения элементов на веб-странице.
4. Множество методов для взаимодействия с элементами.
5. Поддержка параллельного выполнения тестов: Selenium WebDriver позволяет запускать тесты параллельно, что ускоряет
процесс тестирования.
6. Интеграция с различными инструментами: Selenium WebDriver можно интегрировать с различными фреймворками и
инструментами для автоматизации тестирования, такими как TestNG, JUnit, Maven и другие.

JSON Wire Protocol - это протокол для взаимодействия между клиентскими браузерами и удаленными экземплярами браузера,
такими как браузеры, управляемые Selenium WebDriver. Он был одним из первых протоколов, который использовался для
автоматизации браузеров с помощью Selenium WebDriver. Он представляет собой текстовый протокол, основанный на JSON
(JavaScript Object Notation).

Важно отметить, что JSON Wire Protocol был заменен на WebDriver Protocol, который использует протокол W3C WebDriver.
Этот протокол более современный и обеспечивает более стандартизированный способ автоматизации браузеров и
управления ими.

Путь к драйверам браузера, таким как ChromeDriver или GeckoDriver (для Firefox), обычно прописывается с использованием
системного свойства в Java. Это делается с помощью метода System.setProperty(). Вот как это делается:

// Укажите путь к драйверу браузера (ChromeDriver)
    System.setProperty("webdriver.chrome.driver", "путь_к_драйверу/chromedriver.exe");

// Создаем экземпляр WebDriver для браузера Chrome
    WebDriver driver = new ChromeDriver();

// Открываем веб-страницу
    driver.get("https://www.example.com");

// Закрываем браузер после завершения теста
    driver.quit();

Реализация инициализации singleton webdriver:
    public class WebDriverSingleton {
        private static WebDriver driver;

// Приватный конструктор для предотвращения создания экземпляров извне
        private WebDriverSingleton() {

        }

        public static WebDriver getWebDriverInstance() {
            if (driver == null) {
            Инициализация WebDriver
                WebDriverManager.chromedriver().setup();
                driver = new ChromeDriver();
            }
            return driver;
        }
    }

Теперь, когда у вас есть класс WebDriverSingleton, вы можете использовать его для получения единственного экземпляра
WebDriver в вашем тестовом коде:

    WebDriver driver = WebDriverSingleton.getWebDriverInstance();

Реализация инициализации абстрактной фабрики webdriver:
1. Сначала создайте абстрактный класс фабрики:

    public abstract class WebDriverFactory {
        public abstract WebDriver createWebDriver();
    }

2. Затем создайте конкретные фабрики для каждого типа драйвера (например, Chrome и Firefox):

    public class ChromeWebDriverFactory extends WebDriverFactory {
        @Override
        public WebDriver createWebDriver() {
            WebDriverManager.chromedriver().setup();
            return new ChromeDriver();
        }
    }

    public class FirefoxWebDriverFactory extends WebDriverFactory {
        @Override
        public WebDriver createWebDriver() {
            WebDriverManager.firefoxdriver().setup();
            return new FirefoxDriver();
        }
    }

3. Теперь вы можете использовать фабрику для создания экземпляра драйвера в вашем коде:

    public class TestExample {
        public static void main(String[] args) {
            WebDriverFactory factory = new ChromeWebDriverFactory(); // Можете заменить на FirefoxWebDriverFactory

            WebDriver driver = factory.createWebDriver();

            // Ваш код для выполнения действий с веб-драйвером

            driver.quit();
        }
    }

Headless-режим в WebDriver позволяет запускать браузер без графического интерфейса, что может быть полезно для
автоматического тестирования, веб-скрапинга и других сценариев, когда вы не хотите видеть окно браузера.

    ChromeOptions options = new ChromeOptions();
    options.setHeadless(true);
    WebDriver driver = new ChromeDriver(options);