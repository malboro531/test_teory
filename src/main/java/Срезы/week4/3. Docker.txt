Docker — это инструмент, с помощью которого разработчики, могут легко запускать разные приложения
в изолированных контейнерах на одном сервере

Docker решает проблему того, что нам не нужно помнить какие инструменты, каких версий мы хотим установить
Deployment

В каждом контейнере можно настроить окружение, необходимое именно для этого приложения

Контейнер — это изолированный процесс, который использует основное ядро ОС. Работа с контейнерами помогает решить
следующие проблемы:
    - утилизации ресурсов (на одном сервере можно запустить несколько контейнеров);
    - изоляции приложений;
    - установки ОС (по сути, мы используем хостовую ОС);
    - настройки окружения для приложения (можно один раз настроить окружение и быстро клонировать его между
    контейнерами)

Docker позволяет упаковывать различные языки программирования и стек технологий в контейнер, чем избавляет
от проблемы несовместимости разных библиотек и технологий в рамках одного хоста.

Основные сущности:
    Docker Image - Образ (на основе которого запускается контейнер) — готовые решения содержащие необходимый
    функционал, образ нельзя изменить, можно скачать и на его основе создать контейнер.

    Docker Container Контейнер (внутри образы) — это исполняемый экземпляр образа (image). Его можно создавать,
    запускать, останавливать и удалять. Также можно подключать к контейнеру хранилище, объединять контейнеры одной
    или несколькими сетями и общаться с контейнерами, используя Docker API или CLI.

    Docker Hub (там где хранятся образы)
    Docker Hub — это общедоступный Docker registry, то есть хранилище всех доступных Docker-образов. При необходимости
    можно разворачивать свои приватные Docker registry, размещать собственные реестры Docker и использовать их для
    извлечения образов.

    Docker файл - который описывает как будет создаваться образ

    Docker demon - это сервер Docker, который ожидает запросов к API Docker. Демон Docker управляет образами,
    контейнерами, сетями и томами.

    Docker движок - Движок Docker (Docker Engine) — это клиент-серверное приложение. Компания Docker разделила движок
    Docker на два продукта. Docker Community Edition (CE) — это бесплатное ПО, во многом основанное на опенсорсных
    инструментах.
    Docker Enterprise — это платная версия системы, дающая пользователям дополнительные возможности в области
    поддержки систем, управления ими и безопасности. Платная версия Docker даёт компании средства, необходимые для её
    существования.

    Docker compose - (в нем мы декларативно описываем как мы хотим, чтобы контейнеры между собой взаимодействовали,
    как каждый контейнер должен билдиться и как все вместе должно работать. Создаем docker-compose.yml
    файл и в нем пишем конфигурацию).
    Это инструмент, который упрощает развёртывание приложений, для работы которых требуется
    несколько контейнеров Docker. Позволяет выполнять команды, описываемые в файле docker-compose.yml.
    Эти команды можно выполнять столько раз, сколько потребуется. Интерфейс командной строки Docker Compose
    упрощает взаимодействие с многоконтейнерными приложениями. Этот инструмент устанавливается при установке Docker.

Работа с Docker
    1. Скачать на сайте Docker дистрибутив, установить, открыть приложение
    2. может возникнуть ошибка hiperV, легко устраняется
    3. Варианты использования: приложение/консоль
    4. открываем терминал, пишем:

    * docker --version версия докера
    * docker-compose --version версия докер-компоуз

        - docker (или docker help) + enter - видим список всех команд;

    * docker run -d -p 80:80 docker/getting -started - Для создания первого контейнера в терминале
        где:
            * run позволяет запустить контейнер, если контейнера нет то по этой команде он скачивается
            * -d (-detach) для запуска контейнера на заднем фоне (в терминале не будет отображаться информация)
            * -p для связывания портов (локальный (80) и контейнер (80))

    - после выполнения команды run в приложении на вкладке Containers/Apps появится контейнер
    - на вкладке Images появится образ на основе которого работает контейнер

    * docker имя_команды --help получить справку по команде

    * docker info показывает инфо обо всем, что есть в docker

    * docker images показывает все образы и инфо о них

    * docker ps показывает список доступных контейнеров
    * docker ps -a показывает все контейнеры

    - для запуска приложения в браузере ввести localhost:80 или в приложении нажать open in browser

    * docker stop id_контейнера остановить контейнер или в приложении кнопкой stop

    * docker login позволяет авторизоваться через консоль в аккаунте docker

    * docker logout выход из учетной записи

    * docker pull название_образа версия_образа позволяет скачать образ, если не указать версию-скачается последняя

    - запустить образ без контейнера невозможно, поэтому создается контейнер

    * docker run -it название_образа запустить контейнер в интерактивном режиме и далее в терминале можно
    производить с ним манипуляции
    * docker run -it --name имя_контейнера название_образа (напр. запустить jdk и писать код)

    * Ctrl+D выйти из -it режима

    * docker start имя_контейнера - запустить контейнер

    * docker kill имя_контейнера жесткий выход из контейнера с ошибкой (напр. EXETED(137))

Работа с docker в компиляторе.
    1. создаем в проекте DockerFile без расширения, в файле пишем:

! код для каждого образа находится на образа в Docker Hub