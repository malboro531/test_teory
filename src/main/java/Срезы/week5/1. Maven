Maven – это средство для управления и сборки проектов. Он позволяет разработчикам полностью управлять жизненным
циклом проекта. Благодаря этому, команда может автоматизировать процессы, связанные со сборкой, тестирование,
упаковкой проекта и т.д.

Преимущества Maven:
1. Независимость от OS. Сборка проекта происходит в любой операционной системе. Файл проекта один и тот же.
2. Управление зависимостями. Редко какие проекты пишутся без использования сторонних библиотек(зависимостей).
Эти сторонние библиотеки зачастую тоже в свою очередь используют библиотеки разных версий. Maven позволяет управлять
такими сложными зависимостями. Что позволяет разрешать конфликты версий и в случае необходимости легко переходить на
новые версии библиотек.
3. Возможна сборка из командной строки. Такое часто необходимо для автоматической сборки проекта на сервере
(Continuous Integration).
4. Хорошая интеграция со средами разработки. Основные среды разработки на java легко открывают проекты которые
собираются c помощью maven. При этом зачастую проект настраивать не нужно - он сразу готов к дальнейшей разработке.
5. Как следствие - если с проектом работают в разных средах разработки, то maven удобный способ хранения настроек.
Настроечный файл среды разработки и для сборки один и тот же - меньше дублирования данных и соответственно ошибок.
Декларативное описание проекта.

POM (Project Object Model) - это специальный XML-файл, который всегда хранится в базовой директории проекта.
Файл POM содержит информацию о проекте и различных деталях конфигурации, которые используются Maven для создания
проекта.

Среди конфигураций Maven мы можем выделить следующие:
- зависимости проекта
- плагины
- задачи
- профиль создания
- версия проекта
- разработчики
- список рассылки

Все POM файлы должны иметь три обязательных элемента: groupId, artifactId, version.
Ключевой элемент в POM файле – это project, который делится на три главных подгруппы:

– groupId
Это ID группы проекта. Зачастую, это уникальная организация или проект. Например, если мы хотим создать группу, которая
отвечает за видео, то groupId будет выглядеть, примерно так:
net.proselyte.video. В этой группе будут все проекты, которые относятся к видео.
– artifactId
Это идентификатор самого проекта. Чаще всего – его имя. Например, maven-video. artifactId также помогает найти проект в
репозитории.
– version
Версия проекта. Определяет конкретную версию продукта.

Зависимости - следующая очень важная часть pom.xml - тут хранится список всех библиотек (зависимостей) которые
используюся в проекте. Каждая библиотека идентифицируется также как и сам проект - тройкой groupId, artifactId,
version (GAV).

Репозитории - это место где хранятся артефакты: jar файлы, pom -файлы, javadoc, исходники.
Существуют:

- Локальный репозиторий
- Центральный репозиторий
- Внутренний "Корпоративный" репозиторий

Профили используются в тех случаях когда приложение приходится запускать в разном окружении: например, для разработки
используется одна база данных, в рабочем сервере используется другая. При этом могут понадобиться разные настройки,
разные зависимости и плагины.

Фазы Maven-проекта:
1. clean - полностью очистить папку target
2. validate - проверяет корректность проекта и его файловых структур
3. compile - компилирует проект в байт-код
4. test - прогоняет тесты классов из предыдущего шага
5. package - упаковывает скомпилированные классы в новый артефакт: jar, war, zip, …
6. verify - проверяет корректность артефакта и удовлетворение требованиям качества
7. install - кладет артефакт в локальный репозиторий
8. site - создать документацию проекта
9. deploy - заливает артефакт на production-сервер или удаленный репозиторий

Циклы Maven-проекта:
1. clean:
- pre-clean;
- clean;
- post-clean.

2. build:
- validate;
- generate-sources;
- process-sources;
- generate-resources;
- process-resources;
- compile;
- process-test-sources;
- process-test-resources;
- test-compile;
- test;
- package;
- install;
- deploy.

3. site:
- pre-site
- site;
- post-site;
- site-deploy.