1. for
    for (<начальное действие>; <условие выполнения цикла>; <действие после итерации>) {
        <тело цикла>
    }

2. while
    while (<условие выполнения цикла>) {
         <тело цикла>
    }

Позволяет выполнять <тело цикла> до тех пор, пока выражение в условии возвращает true перед каждой итерацией

3. do…while
    do {
        <тело цикла>
    } while (<условие выполнения цикла>);

Сначала отрабатывает действие в <теле цикла>, а потом проверяется <условие выполнения цикла>. Если оно
возвращает true, то цикл выполнит действие повторно.

4. foreach
Для обхода массива или коллекции можно применять циклы for:

    int[] mas = {4, 0, 3, 4, 5};
    for (int i = 0; i < mas.length; i++) {
       System.out.println(mas[i]);
    }

Пример:
    //метод, в котором выводится средняя оценка

    public static double midGrade(int[] numbers) {
            int grade = 0;

            for (int num : numbers) {
                grade = num + grade;
            }
            return ((double) grade / numbers.length);
        }

break
    Не всегда нужно, чтобы цикл отработал до конца, — бывают ситуации, когда нам требуется его прервать.
    Допустим, мы обходим некий массив и хотим остановить выполнение цикла, если в нём найдено число 5.
    Для таких ситуаций существует оператор break, который полностью прекращает работу цикла.

continue
    Бывают ситуации, когда по логике программы требуется пропустить текущую итерацию. Предположим, нужно,
    чтобы в консоль выводилась надпись «Текущее число <число>. Позиция <позиция>», но при условии, что текущий
    элемент массива не равен 5. Это можно сделать с помощью оператора continue — он позволяет сразу перейти
    к следующей итерации.