Обработка исключений в программировании является важной практикой из-за следующих причин:

- Предотвращение сбоев программы: Обработка исключений позволяет избежать аварийного завершения программы из-за ошибок в
ходе её выполнения. Вместо этого, программа может корректно обработать ошибку и продолжить свою работу.
- Улучшение читаемости кода: Обработка исключений делает код более читаемым и структурированным. Вместо размышления о
том, какие ошибки могут возникнуть в процессе выполнения кода, разработчик может явно определить, какие действия следует
предпринять при возникновении конкретных ошибок.
- Логирование и отслеживание ошибок: Обработка исключений позволяет записывать информацию об ошибках в журнал (лог), что
делает их легко обнаруживаемыми и отслеживаемыми. Это помогает разработчикам и системным администраторам быстро выявлять
и решать проблемы в работе приложения.
- Информирование пользователей: Обработка исключений позволяет программе предоставлять информацию пользователю об ошибке
в понятной форме. Это улучшает пользовательский опыт и помогает пользователям понимать, что произошло, и какие действия
им следует предпринять.
- Предотвращение утечек ресурсов: В некоторых случаях исключения могут возникнуть при работе с ресурсами, такими как
файлы, сетевые соединения, базы данных и другие. Обработка исключений позволяет корректно закрывать и освобождать
ресурсы, чтобы избежать утечек памяти или других ресурсов.
- Гарантирование целостности данных: Обработка исключений может использоваться для обеспечения целостности данных.
Например, если происходит ошибка при выполнении транзакции в базе данных, то можно откатить изменения и вернуть базу
данных в согласованное состояние.
- Повышение надежности системы: Обработка исключений помогает создавать более надежные системы, которые могут выявлять и
обрабатывать ошибки, а также восстанавливаться после них. Это особенно важно в критических системах, где отказ может
иметь серьёзные последствия.
- Обработка исключений позволяет программам более гибко реагировать на непредвиденные ситуации и улучшает их
устойчивость и надёжность.

1. Блок try/catch
    try {
       // Защищенный код
    }catch(НазваниеИсключения e1) {
       // Блок catch
    }

2. throws/throw
    public class Test {

       public void deposit(double amount) throws RemoteException {
          // Реализация метода
          throw new RemoteException();
       }
       // Остаток определения класса
    }

3. try-with-resources

    Каждый раз, когда Java-программа начинает работать с каким-то файлом на диске, Java-машина запрашивает
    у операционной системы монопольный доступ к нему. Если ресурс свободен, его захватывает Java-машина.
    После того, как вы закончили работать с файлом, этот ресурс (файл) нужно освободить: уведомить
    операционную систему, что он вам больше не нужен. Если вы этого не сделаете, ресурс будет продолжать
    числиться за вашей программой.
    После ключевого слова try нужно добавить круглые скобки, а внутри них — создать объекты с внешними ресурсами.
    Для объекта, указанного в круглых скобках, компилятор сам добавит секцию finally и вызов метода close().

    В норме, при использовании различных видов ресурсов, таких как потоки, соединения, файлы и др.,
    нам предстоит закрыть их непосредственно при использовании блока finally.

    Синтаксис
    try(FileReader fr = new FileReader("Путь к файлу")) {
       // использование ресурса
       }catch() {
          // тело catch
       }
    }