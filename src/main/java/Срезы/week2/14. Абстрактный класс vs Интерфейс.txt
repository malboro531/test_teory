Полезные ссылки:
    https://topjava.ru/blog/razlichiya-mezhdu-abstraktnymi-klassami-i-interfeysami-v-java#1

Интерфейс
    это контракт, который должен быть реализован конкретным классом, нельзя создать экземпляр интерфейса

Абстрактный класс
    похож на обычный, но отличается тем, что может содержать абстрактные методы — методы без реализации,
    и нельзя создать экземпляр абстрактного класса.

Различия между абстрактными классами и интерфейсами
    основное различие между интерфейсом и абстрактным классом в том, что интерфейс не может иметь состояния,
    тогда как абстрактный класс может (в виде полей экземпляра).

    Классы могут реализовывать более одного интерфейса, но расширять только один абстрактный класс.

    Интерфейс может быть реализован классом или расширен другим интерфейсом,
    а класс может быть только расширен.


Сравнение интерфейсов и абстрактных классов

Интерфейсы
    - Класс может реализовывать несколько интерфейсов.
    - реализуется с помощью слова implements.
    - Может расширять другой интерфейс с помощью extends.
    - Можно использовать только static final public поля, локальные переменные в методах.
    - Не может быть конструктора.
    - Могут быть абстрактные методы.
    - Могут быть default и static методы, private методы с реализацией (с Java 9).
    - У методов модификаторы по умолчанию public abstract.

Абстрактные классы
    - Могут быть любые поля, в том числе статические, изменяемые и неизменяемые.
    - Класс может расширять только один абстрактный класс.
    - Может быть только расширен с помощью extends.
    - Могут быть изменяемые поля экземпляра. Параметры и локальные переменные в методах.
    - Может содержать конструктор. Нужен Чтобы в каждом конструкторе наследника не писать одно и то же.
        - Поскольку абстрактные классы имеют состояние (поля), их нужно как-то инициализировать в классе наследнике.
        Конструктор предназначен для инициализации полей объекта при создании экземпляра этого класса.
        - мы можем поместить туда код, который должен быть выполнен, когда экземпляр создан.
        Объявление конструктора родителя в дочернем классе:
            public class ConcreteClass extends AbstractClass {

                public ConcreteClass() {
                    super();
                }
    - Могут быть любые методы.


    - Абстрактные классы с одним абстрактным методом не могут использоваться в лямбда-выражениях.

    - Лямбда-выражения могут использоваться только с функциональными интерфейсами (интерфейс только с одним
        методом), но не с абстрактными классами с одним абстрактным методом.

    - В лямбда-выражениях могут использоваться только функциональные интерфейсы.