-=Полезные ссылки
    https://topjava.ru/blog/rukovodstvo-po-modifikatoru-static-v-java#6

Static — модификатор, применяемый к полю, блоку, методу, импорту или внутреннему классу. Данный модификатор
указывает на привязку субъекта к текущему классу. Если поле не будет помечено Static значение переменной будет
привязываться к объекту, созданному по этому классу.

Можно обращаться к статическому методу или полю, используя имя класса.

Статическое поле.
    Если поле объявляется статическим, то в независимости от количества созданных объектов класса — всегда
    будет существовать только один экземпляр статического поля.

Статический блок.
    Есть два блока инициализации — обычный и статический.
    Блок предназначен для инициализации внутренних переменных. Если блок обычный, то им инициализируют
    внутренние переменные объекта, если же статический, соответственно, им задают статические переменные,
    то есть переменные класса).

    class Block {

        static int year;

        static {
            year = 2022;
            System.out.println("This code block got executed first");
        }

        public static void main(String[] args) {

            System.out.println("Hello World");
            System.out.println(year);
        }
    }

Статический метод
    Статические методы отличаются от обычных тем, что они также привязаны к классу, а не к объекту.
    Важным свойством статического метода является то, что он может обратиться только к статическим
    переменным/методам.

Статический класс в Java
    Статическим классом может быть только внутренний класс.
    Внутренние классы, объявленные статическими, называются статическими вложенными классами (static nested classes).
    Класс привязан к внешнему классу, и если внешний наследуется другим классом, то этот не будет наследован.
    При этом данный класс можно наследовать, как и он может наследоваться от любого другого класса и
    имплементировать интерфейс.

    Пример nested class:
        public class Singleton  {
            private Singleton() {}

            private static class SingletonHolder {
                private static final Singleton INSTANCE = new Singleton();
            }

            public static Singleton getInstance() {
                return SingletonHolder.instance;
            }
        }

Конструктор
    не может быть статическим. Это связано с тем, что ключевые слова static используются, когда мы хотим,
    чтобы член принадлежал классу, а не объекту. Но конструкторы предназначены для инициализации
    объектов, поэтому компилятор будет рассматривать его как метод. Мы получим ошибку required return type.
