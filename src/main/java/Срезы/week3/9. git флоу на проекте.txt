Стратегии:
1. GitHub Flow
- Код в master ветке должен быть не поломанным и готовым к развертыванию в любое время (то есть нельзя туда положить
код, который помешает собрать проект и развернуть его на сервере).
- Когда планируется работа над новой функциональностью, необходимо создать новую ветку (feature ветку) на основе master
ветки и дать ей понятное имя. Коммитить свой код локально и регулярно пушить свои изменения на эту же ветку в
удаленный репозиторий.
- Открыть Pull-Request (что такое pull-request, можно почитать здесь), когда есть четкое ощущение, что работа готова и
может быть смерджена в master ветку (или если уверенности нет, но хочется получить отзывы о проделанной работе).
- После того, как новую фичу в пул-реквесте заапрувили, ее можно смерджить в master ветку.
- Когда изменения смерджены в master ветку, их нужно развернуть на сервере немедленно.

По GitHub Flow получается, что прежде чем начать работу над чем-то новым, будь то исправление или новая фича, нужно
создать новую ветку на основе master’а и дать ей подходящее имя.

2. GitFlow
Постоянные ветки:
- master: эту ветку просто так никто не должен трогать/ничего не пушить туда. В этой стратегии master отображает
последнюю стабильную версию, которую используют в продакшене (то есть на реальном сервере);
- development — это ветка для разработки. Потенциально она может быть нестабильная.
Разработка ведется при помощи трех вспомогательных временных веток:
- Фиче ветки (feature branches) — для разработки новой функциональности (на основе development ветки).
- Релизные ветки (release branches) — для подготовки выпуска новой версии проекта.
- Хотфикс ветки (hotfix branches) — быстрое решение дефекта, который нашли уже реальные пользователи на реальном
сервере.

3. The Forking Workflow
2 репозитория:
- Оригинальный репозиторий, в который будут смердживаться все изменения.
- Форк репозиторий (это копия оригинального репозитория во владении другого разработчика, который хочет внести
изменения в оригинальный).
Такая стратегия дает следующее премущество: разработка может вестись в форк-репозитории и без предоставления прав на
совместную разработку в оригинальном. Это удобно и владельцу оригинального репозитория, и разработчику, который хочет
поучаствовать в создании какого-то продукта.