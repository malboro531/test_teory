1. git pull - скачивает изменения с УР в ЛР и сразу их применяешь (fetch -> merge)

2. git push (origin <branch>)  - отправка изменений текущей (указанной) ветки на УР
   git push origin branch:server_branch - Отправка ветки на сервер в ветку с другим именем (где branch – имя локальной
ветки, server_branch – имя удаленной ветки на сервере)

3. git commit -m "Комментарий к коммиту" - фиксирует изменения перед пушем на УР

4. git branch
    - git branch показать все ветки (текущая отмечена *)
    - git branch branch_name Создать новую ветку но не переключаться на нее
    - git checkout -b branch_name Создать новую ветку и переключиться на нее
    - git checkout branch_name переключиться на существующую ветку

5.1. git merge - в текущей ветке вводим git merge + branch name (которую вливаем) + текст commit + enter
5.2. git rebase - вид merge request, при этом мы выбираем rebase and merge, commit вливаемой ветки будут выглядеть так
    как будто они делались в базовой ветке при этом не будет commit со слиянием

6. git config
       - git config --global user.name "name" задать имя пользователя
       - git config --global user.email "email" задать почту
       - git config --list проверка настроек

7.1. git chery-peak <hash-commit-1> - перенос commit из одной ветки в другую
git log - можно посмотреть хэш коммита
7.2. git cherry-pick <название ветки> - перенос последнего коммита из указанной ветки

8. git stash - сохраняет неподтвержденные изменения (индексированные и неиндексированные) в
    отдельном хранилище, чтобы вы могли вернуться к ним позже

    git stash pop Чтобы применить ранее отложенные изменения

    git stash apply применить изменения к рабочей копии, не удаляя их из набора отложенных изменений

    git stash list или git log просмотреть список созданных наборов

    По умолчанию команда git stash pop применяет последний набор отложенных изменений: stash@{0}

    git stash drop Удалить определенный набор отложенных изменений (прим. git stash drop stash@{1})

    git stash clear удаляет все наборы отложенных изменений

9. git revert <id commit>
Создает новый коммит, который будет прямо противоположен тому, который хотим убрать (противоположный тому,
который удаляем)

Пример: Отмена изменений, внесенных в коммит с указанным SHA:
git revert <commit_SHA>
После выполнения этой команды будет создан новый коммит, который отменяет изменения, внесенные в коммит <commit_SHA>.
Это не удаляет историю, а добавляет новый коммит с изменениями отмены.
При столкновении с конфликтом во время отката и передумали продолжать git revert, выполните команду git revert --abort

10. git reset
Команда git reset используется для перемещения указателя ветки (обычно HEAD) на определенный коммит. Это позволяет
"сдвигать" вашу ветку в прошлое, удаляя коммиты после указанного коммита. Это полезно, когда вы хотите удалить ненужные
коммиты из истории.

Пример 1: Сброс ветки к определенному коммиту, отбрасывая все коммиты после него:
git reset <commit_SHA>

Пример 2: Сброс ветки и сохранение изменений как неотслеживаемых файлов:
git reset --soft <commit_SHA>

Пример 3: Сброс ветки и удаление изменений (ОСТОРОЖНО, это стирает коммиты навсегда):
git reset --hard <commit_SHA>

11. git fetch - скачивает изменения с УР в ЛР, но не применяет их. Можно просмотреть изменения с помощью команды git log
После выполнения git fetch, вы можете решить выполнить git merge или git rebase, чтобы объединить полученные изменения с
вашей веткой.

12. pull request
    - запрос на слияние с базовой веткой
    - GitHub - pull request, GitLab - merge request
    - merge/pull request при этом все commit`s ветки и commit мерджа будут перенесены в базовую ветку