REST (Representational State Transfer) и SOAP (Simple Object Access Protocol) - это два различных подхода к построению
веб-сервисов для обмена данными между компьютерами. Они имеют разные архитектурные принципы и используют разные
технологии для достижения своей цели.

REST - это архитектурный стиль, который ориентирован на ресурсы (например, URL) и предоставляет доступ к ним через
стандартные HTTP методы (GET, POST, PUT, DELETE и т. д.).

REST использует протокол HTTP (или HTTPS) для обмена данными между клиентом и сервером.

REST API поддерживает форматы: JSON, XML, TXT, CSV, HTML

В REST есть шесть требований к проектированию API. Пять из них обязательные, одно — опциональное:
    - Клиент-серверная модель (client-server model).
        Клиент запрашивает - сервер обрабатывает запрос и отправляет ответ.

    - Отсутствие состояния (statelessness).
        Сервер не хранит данных о прошлых взаимодействиях с клиентом - каждый запрос должен содержать всю
        информацию для его обработки.

    - Кэширование (cacheability).
        Сохранение части данных о предыдущих запросах у клиента или на промежуточных серверах.

    - Единообразие интерфейса (uniform interface).
        Единый способ обращения к каждому ресурсу.

    - Многоуровневая система (layered system).
        Между сервером и клиентом есть несколько промежуточных узлов, выполняющих вспомогательные функции,
        — прокси-серверы.

    - Код по требованию (code on demand) — необязательно.
        Сервер в ответ на запрос может отправить исходный код, который выполняется уже на стороне клиента.
        Благодаря этому можно передавать целые сценарии. Например, динамические элементы пользовательского
        интерфейса, написанные на JavaScript.



SOAP - это протокол для обмена структурированными сообщениями в формате XML между клиентами и серверами. Он может
использовать различные протоколы для передачи данных, такие как HTTP, SMTP, TCP и другие.

Любое сообщение в протоколе SOAP — это XML документ, состоящий из следующих элементов (тегов):

    - Envelope.
        Идентифицирует XML-документ как сообщение SOAP
        Корневой обязательный элемент. Определяет начало и окончание сообщения.

        Определяет XML-документ как сообщение SOAP с помощью пространства имен
        xmlns:soap=»http://www.w3.org/2003/05/soap-envelope/».
        Если в определении будет указан другой адрес, сервер вернет ошибку.

    - Header.
        Необязательный элемент — заголовок. Содержит элементы, необходимые для обработки самого сообщения,
        например, идентификатор сессии.

        В заголовке могут использоваться три атрибута:
                    - mustUnderstand — 1 или 0 — говорит принимающему приложению о том, следует ли распознавать
                    заголовок в обязательном или опциональном порядке.

                    - actor - задает конкретную конечную точку для сообщения

                    - encodingStyle - устанавливает специфическую кодировку для элемента. По умолчанию
                    SOAP-сообщение не имеет определенной кодировки.

    - Body.
        Основной элемент, содержит основную информацию сообщения. Обязательный.
        Сообщение, которое передает веб-приложение. Может содержать запрос к серверу или ответ от него

    - Fault.
        Элемент, содержащий информацию об ошибках, возникающих в процессе обработки сообщения. Необязательный.

        - faultcode — код неполадки;

        - faultstring — «человекопонятное» описание проблемы;

        - faultactor — информация о программном компоненте, который вызвал ошибку;

        - detail — дополнительные сведения о месте возникновения неполадки.

Пример запроса:

        <?xml version="1.0"?>
        <soap:Envelope
        	xmlns:soap="http://www.w3.org/2003/05/soap-envelope/"
        	soap:encodingStyle="http://www.w3.org/2003/05/soap-encoding">
        <soap:Body>
        	<m:GetPrice xmlns:m="https://online-shop.ru/prices">
        		<m:Item>Dell Vostro 3515-5371</m:Item>
        	</m:GetPrice>
        </soap:Body>
        </soap:Envelope>

Пример ответа:

    <?xml version="1.0"?>
    <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope/"
    	soap:encodingStyle="http://www.w3.org/2003/05/soap-encoding">
    <soap:Body>
    	<m:GetPriceResponse xmlns:m="https://online-shop.ru/prices">
    		<m:Price>37299</m:Price>
    	</m:GetPriceResponse>
    </soap:Body>
    </soap:Envelope>

XSD - это язык для определения структуры и типов данных в XML-документах. Он позволяет создавать схемы (схемы XSD),
которые описывают, какие элементы и атрибуты допустимы в XML-документе, какие значения они могут иметь, и как они могут
взаимодействовать друг с другом. Основные функции XSD:

- Определение структуры и синтаксиса XML-документа.
- Ограничение значений элементов и атрибутов.
- Поддержка наследования и типов данных.
- Обеспечение валидации XML-документов на соответствие схеме.

WSDL - это язык описания веб-сервисов. Он предоставляет формальное описание, как взаимодействовать с веб-сервисом,
включая список доступных операций, форматы сообщений и точки доступа (URL) для обращения к сервису.
Основные функции WSDL:

- Описание доступных операций веб-сервиса и их параметров.
- Описание форматов сообщений (SOAP, XML, JSON) для операций.
- Описание адресов, по которым можно обращаться к веб-сервису.

Преимущества:

    - Асинхронная обработка и последующий вызов. Стандарт SOAP 1.2 обеспечивает клиенту гарантированный
    уровень надежности и безопасности.

    WS Security — это набор принципов/рекомендаций по регулированию процедур аутентификации и конфиденциальности
    для обмена сообщениями SOAP. Меры, совместимые с WSS, включают цифровые подписи, шифрование XML, сертификаты
    X.509 и пароли, среди прочего. XML-шифрование делает данные нечитаемыми, когда к ним получают доступ
    неавторизованные пользователи.

    RPC - протокол, удаленного вызова (работает на транспортном уровне). Центральное место в реализациях RPC
    занимает транспортная подсистема, отвечающая за управление исходящими и входящими соединениями.
    В её функции входит поддержка понятия «граница сообщения» для транспортных протоколов, не поддерживающих
    его непосредственно (TCP) и поддержка гарантированной доставки для транспортных протоколов, её не
    поддерживающих (UDP)

    - Операции с состоянием. Если приложение требует, чтобы состояние сохранялось от одного запроса к другому,
    то стандарт SOAP 1.2 предоставляет структуру для поддержки таких требований.

Недостатки:

    - объемные сообщения;
    - поддержка только одного формата — XML;
    - схема работы по принципу «один запрос — один ответ»;
    - смена описания веб-сервиса может нарушить работу клиента.

  Протоколы HTTP/HTTPS, SMTP, XMPP, FTP

Структура xml

  XML документ должен содержать корневой элемент. Этот элемент является «родительским» для всех других элементов.

  Все элементы в XML документе формируют иерархическое дерево. Это дерево начинается с корневого элемента и
  разветвляется на более низкие уровни элементов.

  Все элементы могут иметь подэлементы (дочерние элементы):

      <корневой>
         <потомок>
           <подпотомок>.....</подпотомок>
         </потомок>
      </корневой>

  Пример:

      <?xml version="1.0" encoding="windows-1251"?>
      <book category="WEB">
         <title lang="en">Learning XML</title>
         <author>Erik T. Ray</author>
         <year>2003</year>
         <price></price>
      </book>

Различия между REST и SOAP:

1. Простота и читаемость: REST использует простой и читаемый формат данных, такой как JSON или XML. SOAP использует XML,
который более сложен для чтения и создания вручную.

2. Производительность: REST обычно более эффективен с точки зрения производительности, так как не требует большого
объема метаданных, как SOAP.

3. Использование: REST более популярен в веб-разработке и часто используется для создания веб-сервисов. SOAP, с другой
стороны, чаще используется в корпоративных приложениях и интеграции между системами.

4. Прозрачность: SOAP обычно обеспечивает более высокую степень надежности и целостности данных благодаря возможности
добавления метаданных и проверки данных.

5. Состояние: RESTless (без состояния), в то время как SOAP поддерживает состояние.

Выбор между REST и SOAP зависит от конкретных требований вашего проекта. REST часто предпочтителен для общедоступных
веб-сервисов и веб-разработки, в то время как SOAP может быть полезным в корпоративных средах, где необходима высокая
надежность и сложная интеграция.