Процессы на проекте:
    На текущем проекте написано 800 текст-кейсов. Из них в регрессе используется около 600 тестов, из них
    автоматизировано 80% (прим. 500 тестов), 20% (оставшиеся) не автоматизированы потому что:
    1. добавились новые кейсы.
    2. некоторые кейсы, сложно автоматизировать потому что данные могут меняться.
    3. некоторые нет смысла автоматизировать это, как правило, очень простые кейсы.
    Smoke автоматизирован на 100%. (100, преимущественно UI тесты)

Релизная политика.
    Получаем задачу от бизнеса, планируем (грумим, задачи оцениваем с использованием структурной декомпозиции и
    на основе опыта), разделяем на таски, забиваем в беклог оттуда берем в спринты, выполняем, тестируем.
    Релизная политика организована так, после проведения регресса и в случае успешного его прохождения,
    мы со своей стороны даем апрув, что сборку можно отправлять в прод, багов нет или по имеющимся багам
    принято то или иное решение, разработчики готовят релиз-кандидат и как правило в следующем спринте вт или ср
    сборка отправляется в прод.

Как устроен процесс регрессионного тестирования на проекте?
    Тригер для начала регресса: когда все задачи выполнены, новый функционал протестирован в рамках выполнения
    отдельных задач и приведены в статус ready to realize, для нас это является тригером для старта регресса.
    Разработчики разворачиваем ее на нужный тестовый стенд.
    Далее мы проверяем ранее разработанный функционал на то что он не имеет привнесенных дефектов, не сломался и
    весь разрабатываемый функционал в рамках версии присутствует в сборке, (тесты автоматизированные, которые
    успели написать и мануальные). Регресс длится около 3 часов
    Упавшие тесты проверяем, прогоняем отдельно, при необходимости мануально, в зависимости от причины устраняем
    сразу или создаем таску на исправление.

Прогон тестов.
    Прогон в Jenkins, три стенда, тестовый, предпрод и прод, на тестовом стенде новые фичи в рамках спринта
    и по расписанию запускались ночью смоук тесты, а на предпроде вручную запускали регресс (посмотреть
    количество пройденных/упавших тестов), проводили разбор упавших тестов, составляли план,
    при необходимости заводили баг-репорты, если были большие баги бывало что какая-то часть функционала в релиз
    не попадала.

Тесты на автоматизацию пишем в следующий спринт в рамках таски "автотесты". Кейсы на автоматизацию отбираем путем
общего планирования и разбора задач.

Метрики на проекте.
    Алюр отчет по проходимости тестов, показатель - прирост тестов,
    успешность команды и процессов оцениваем на ретро, смотрим процент закрываемости задач,
    процент возникающих багов после релиза.

Тестовая модель.
    Тестовая модель - это модель функционала системы и/или поведения пользователя. Построение тестовой модели
    начинается с построения структуры, подготовки тестовых данных, а затем структура наполняется тест-кейсами,
    которы помогут проверить функционал системы.

    Я в своей работе использую чек-листы, тест план не составляется, по чек-листам провожу тестирование требований
    далее пишу тест-кейсы, которые собираю в тест-сюиты разложенные по эпикам по соответствующим микросервисам.
    Из них же формирую тест-раны для тестирования (регрессионного, смоук), сортируем по тегам.

Интеграционное тестирование
    1. С начала проверяем документацию, куда вообще должен стучать мой запрос, в зависимости от доки проверяю
    от каждой до каждой точки API, ДЕЛАЕМ ПРОВЕРКУ ПУТЕМ ОТПРАВКИ ЗАПРОСОВ И СРАВНЕНИЯ С ОЖИДАЕМЫМИ РЕЗУЛЬТАТАМИ,
    по логам проверяем как отработал запрос(сортируем как удобно),
    если подразумевается запись в БД проверяем (либо запросом, либо вручную).
    Проходило в рамках взаимодействия между микросервисами при написании апи тест-кейсов, при их автоматизации
    отправляли запросы - проверяли ответы, создавали моки, в этом нам помогали разработчики, ваермок
    который частично настраивали сами, частично разработчики.

    2. Расчет процентов: В этом шаге будет проверено, как система расчитывает проценты для депозита в рублях.
    Тест может включать следующие проверки:
       - Создание депозита с известным начальным балансом и процентной ставкой.
       - Подождать определенное время (например, месяц) для начисления процентов.
       - Проверить, что проценты были начислены правильно на баланс депозита.

Лог-запись должна состоять из:
    [id записи][уровень лога, например "INFO"][сообщение лога][дата и время визита][тип запроса]
    [URL][протокол, по которому пользователь соединился с сайтом]
    [код ответа сервера][TraceID - интеграционный id, по нему можно проследить историю запроса]
    Фильтруем по TraceID и смотрим на каком этапе перестал работать запрос.